Index: Assets/Scripts/Movement/Movement.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using FlightAce.interfaces;\r\nusing UnityEngine;\r\n\r\nnamespace FlightAce.movement\r\n{\r\n    [RequireComponent(typeof(IActorContext))]\r\n    public class Movement : MonoBehaviour\r\n    {\r\n        [SerializeField] private float _movementSpeed = 1;\r\n        \r\n        [Range(0, 5)]\r\n        [SerializeField] private float _rotationSpeed = 1;\r\n        \r\n        [Range(0, 2)]\r\n        [SerializeField] private float _shaking;\r\n        \r\n        [Range(0, 90)]\r\n        [SerializeField] private int _maxRotationAngle = 45;\r\n        \r\n        private IMovementInput _movementInput;\r\n        private PlaneMotionCalculator _planeMotionCalculator;\r\n        private Rigidbody2D rigidBody2D;\r\n        \r\n        // Start is called before the first frame update\r\n        void Start()\r\n        {\r\n            var context = GetComponent<IActorContext>();\r\n            rigidBody2D = context.Rigidbody2D;\r\n            _planeMotionCalculator = new PlaneMotionCalculator();\r\n            _movementInput = context.MovementInput;\r\n            \r\n        }\r\n\r\n        // Update is called once per frame\r\n        void Update()\r\n        {\r\n            var inputV = _movementInput.GetInputVector();\r\n            var boundaries = new Vector2(15, 5);\r\n            var trans = transform;\r\n            \r\n            transform.position = _planeMotionCalculator.CalculateNewPosition(inputV, trans.position, _movementSpeed, \r\n                boundaries, _shaking\r\n                );\r\n            rigidBody2D.MovePosition( _planeMotionCalculator.CalculateNewPosition(inputV, trans.position, _movementSpeed, \r\n                boundaries, _shaking\r\n            )); \r\n            transform.rotation = _planeMotionCalculator.CalculateNewRotation(inputV, trans.right, \r\n                _rotationSpeed,\r\n                _maxRotationAngle\r\n                );\r\n            \r\n            rigidBody2D.MoveRotation( _planeMotionCalculator.CalculateNewRotation(inputV, trans.right, \r\n                _rotationSpeed,\r\n                _maxRotationAngle\r\n            ));\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Assets/Scripts/Movement/Movement.cs	(revision a1fed89e25bbd3f41041f7701b3a55492d27a801)
+++ Assets/Scripts/Movement/Movement.cs	(date 1593696709220)
@@ -16,7 +16,7 @@
         
         [Range(0, 90)]
         [SerializeField] private int _maxRotationAngle = 45;
-        
+            
         private IMovementInput _movementInput;
         private PlaneMotionCalculator _planeMotionCalculator;
         private Rigidbody2D rigidBody2D;
@@ -25,7 +25,6 @@
         void Start()
         {
             var context = GetComponent<IActorContext>();
-            rigidBody2D = context.Rigidbody2D;
             _planeMotionCalculator = new PlaneMotionCalculator();
             _movementInput = context.MovementInput;
             
@@ -41,18 +40,11 @@
             transform.position = _planeMotionCalculator.CalculateNewPosition(inputV, trans.position, _movementSpeed, 
                 boundaries, _shaking
                 );
-            rigidBody2D.MovePosition( _planeMotionCalculator.CalculateNewPosition(inputV, trans.position, _movementSpeed, 
-                boundaries, _shaking
-            )); 
             transform.rotation = _planeMotionCalculator.CalculateNewRotation(inputV, trans.right, 
                 _rotationSpeed,
                 _maxRotationAngle
                 );
             
-            rigidBody2D.MoveRotation( _planeMotionCalculator.CalculateNewRotation(inputV, trans.right, 
-                _rotationSpeed,
-                _maxRotationAngle
-            ));
         }
     }
 }
